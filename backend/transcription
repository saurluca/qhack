

def get_openai_client():
    api_key = getattr(settings, "OPENAI_API_KEY", None)
    return OpenAI(api_key=api_key) if api_key else None



@api_view(["POST"])
def transcribe_audio(request):
    client = get_openai_client()

    if not client:
        return Response(
            {"error": "OpenAI API key is missing"},
            status=status.HTTP_503_SERVICE_UNAVAILABLE,
        )

    if "file" not in request.FILES:
        return Response(
            {"error": "No audio file provided"}, status=status.HTTP_400_BAD_REQUEST
        )

    audio_file = request.FILES["file"]

    # Create a temporary file to store the audio
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_audio:
        for chunk in audio_file.chunks():
            temp_audio.write(chunk)
        temp_audio_path = temp_audio.name

    try:
        # Open the temporary file and send it to OpenAI
        with open(temp_audio_path, "rb") as audio:
            response = client.audio.transcriptions.create(
                model="whisper-1", file=audio, language="de"
            )

        # Clean up the temporary file
        os.unlink(temp_audio_path)

        return Response({"text": response.text})

    except Exception as e:
        # Make sure to clean up the temporary file even if there's an error
        if os.path.exists(temp_audio_path):
            os.unlink(temp_audio_path)

        print(f"Error in transcription: {str(e)}")
        return Response(
            {"error": f"Transcription failed: {str(e)}"},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR,
        )


